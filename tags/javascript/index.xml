<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>JavaScript on Haisheng Wu's Tech Blog</title><link>https://redscarf.me/tags/javascript/</link><description>Recent content in JavaScript on Haisheng Wu's Tech Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 23 Jun 2017 22:57:25 +1000</lastBuildDate><atom:link href="https://redscarf.me/tags/javascript/index.xml" rel="self" type="application/rss+xml"/><item><title>OC 与 JS 通信的几种方式</title><link>https://redscarf.me/ios-oc-interact-with-js/</link><pubDate>Fri, 23 Jun 2017 22:57:25 +1000</pubDate><guid>https://redscarf.me/ios-oc-interact-with-js/</guid><description>在代理方法中拦截协议 使用 JavaScriptCore WKWebView 的 WKScriptMessagehandler 使用 NSURLProtocol 拦截请求 使用第三方库 WebViewJavascriptBridge 使用 WebSocket 这里只介绍第 6 种，其它的相关资料网上有很多。
使用 WebSocket 的方式需要在应用内起一个 websocket server 服务（有很多第三方的 websocket server 库），html 页面通过 Websocket 连接到服务，接着就是发送消息了，剩下的就跟代理方法拦截协议类似。
// OC code, 以 PocketSocket 这个库为例 _socketServer = [PSWebSocketServer serverWithHost:nil port:9001]; _socketServer.delegate = self; _socketServer.delegateQueue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0); [_socketServer start]; #pragma mark - PSWebSocketServerDelegate - (void)serverDidStart:(PSWebSocketServer *)server { NSLog(@&amp;#34;Server did start…&amp;#34;); } - (void)serverDidStop:(PSWebSocketServer *)server { NSLog(@&amp;#34;Server did stop…&amp;#34;); } - (BOOL)server:(PSWebSocketServer *)server acceptWebSocketWithRequest:(NSURLRequest *)request { NSLog(@&amp;#34;Server should accept request: %@&amp;#34;, request); return YES; } - (void)server:(PSWebSocketServer *)server webSocket:(PSWebSocket *)webSocket didReceiveMessage:(id)message { // 在这里拦截 NSLog(@&amp;#34;Server websocket did receive message: %@&amp;#34;, message); NSString *text = message; NSURL *url = [NSURL URLWithString:text]; if ([url.</description></item></channel></rss>