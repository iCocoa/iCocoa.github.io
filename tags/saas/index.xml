<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SAAS on Haisheng Wu's Tech Blog</title><link>https://redscarf.me/tags/saas/</link><description>Recent content in SAAS on Haisheng Wu's Tech Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 24 Jul 2023 19:30:32 +1000</lastBuildDate><atom:link href="https://redscarf.me/tags/saas/index.xml" rel="self" type="application/rss+xml"/><item><title>多租户</title><link>https://redscarf.me/multi-tenant/</link><pubDate>Mon, 24 Jul 2023 19:30:32 +1000</pubDate><guid>https://redscarf.me/multi-tenant/</guid><description>多租户软件架构概述 多租户软件架构简介 在多租户软件架构中，一个应用程序实例及其底层的数据库和硬件资源服务于多个租户（或用户账户）。一个租户可以是单个用户，但更常见的是一组用户，例如一个客户组织，他们共享同一个应用程序实例。每个租户的数据与其他租户的数据相互隔离，彼此不可见，从而确保所有租户的数据安全和隐私。
多租户架构的优势 1. 低成本 成本效益：软件提供商可以通过单一应用程序实例和基础设施为多个租户提供服务，租户共同分担软件维护、基础设施和数据中心运营的成本，因此持续成本通常低于单租户安排。SaaS软件通常以可预测的月度或年度订阅价格提供，价格基于用户数量、使用级别或应用程序中管理的数据量。 2. 可伸缩性 按需扩展：租户可以根据需求进行扩展，新用户可以访问相同的应用程序实例，通常只需增加相应的订阅费用。 3. 无代码定制化 高度可配置：SaaS多租户产品具有高度可配置性，每个租户客户无需昂贵、耗时且有时风险较高的定制开发，即可根据其特定业务需求定制应用程序。 4. 持续更新与维护 持续更新：多租户软件提供商负责更新和补丁。新功能添加或修复应用无需客户参与，且只需更新一次（与单租户架构不同，提供商必须更新每个软件实例）。 5. 提高生产率 专注核心业务：租户无需管理基础设施或软件，可以专注于更重要的任务，从而提高生产率。 多租户实现方式 Red Hat 多租户实现 Red Hat 使用以下三种方式实现多租户：
1. 应用层多租户 应用层多租户：在应用程序级别实现多租户，通过逻辑隔离不同租户的数据和资源。 2. 使用命名空间 命名空间：命名空间将全局系统资源封装在一个抽象中，使其在命名空间内的进程看来，它们拥有全局资源的独立实例。对全局资源的更改对命名空间内的其他进程可见，但对其他进程不可见。命名空间的一个用途是实现容器。 3. 集群层多租户 集群层多租户：在集群级别实现多租户，通过物理隔离不同租户的资源和数据。 Linux 命名空间 Linux 命名空间是一种操作系统层级的资源隔离技术，能够将 Linux 的全局资源划分为命名空间范围内的资源，不同命名空间间的资源彼此透明，不同命名空间里的进程无法感知到其他命名空间里面的进程和资源。Linux 命名空间实现了 6 项资源隔离，涵盖了一个小型操作系统的运行要素，包括主机名、用户权限、文件系统、网络、进程号、进程间通信。Linux 命名空间是操作系统虚拟化技术（如容器）的底层实现支撑。
Approaches to implementing multi-tenancy in SaaS applications linux namespace</description></item></channel></rss>