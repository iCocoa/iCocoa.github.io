<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0"><channel><title>Block - 标签 - Haisheng Wu's Tech Blog</title><link>http://www.redscarf.me/tags/block/</link><description>Block - 标签 - Haisheng Wu's Tech Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>whs543@sina.com (Haisheng Wu)</managingEditor><webMaster>whs543@sina.com (Haisheng Wu)</webMaster><lastBuildDate>Sat, 20 Sep 2014 20:18:23 +1000</lastBuildDate><atom:link href="http://www.redscarf.me/tags/block/" rel="self" type="application/rss+xml"/><item><title>iOS Block</title><link>http://www.redscarf.me/ios-blocks/</link><pubDate>Sat, 20 Sep 2014 20:18:23 +1000</pubDate><author>whs543@sina.com</author><dc:creator>Haisheng Wu</dc:creator><guid>http://www.redscarf.me/ios-blocks/</guid><description><![CDATA[blocks 是 C 语言的扩充功能。blocks 是带有自动变量（局部变量）的匿名函数。
截获自动变量 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  int main() { int dmy = 256; int val = 10; const char *fmt = &#34;val = %d\n&#34;; void (^blk)(void) = ^{ printf(fmt,val); }; val = 2; fmt = &#34;These value were changed. val = %d\n&#34;; blk(); return 0; }   结果：val = 10
分析：block 语法的表达式使用的是它之前声明的自动变量 fmt 和 val。block 表达式截获所使用的自动变量的值为瞬间值。因为 block 表达式保存了自动变量的值（截获），所以在执行 block 语法后，即使改写了 block 中使用的自动变量的值也不会影响 block 执行的结果。]]></description></item></channel></rss>