<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0"><channel><title>C - 分类 - Haisheng Wu's Tech Blog</title><link>http://www.redscarf.me/categories/c/</link><description>C - 分类 - Haisheng Wu's Tech Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>whs543@sina.com (Haisheng Wu)</managingEditor><webMaster>whs543@sina.com (Haisheng Wu)</webMaster><lastBuildDate>Sun, 27 Jul 2014 20:56:50 +1000</lastBuildDate><atom:link href="http://www.redscarf.me/categories/c/" rel="self" type="application/rss+xml"/><item><title>Typeof()</title><link>http://www.redscarf.me/c-typeof/</link><pubDate>Sun, 27 Jul 2014 20:56:50 +1000</pubDate><author>whs543@sina.com</author><dc:creator>Haisheng Wu</dc:creator><guid>http://www.redscarf.me/c-typeof/</guid><description>看到项目中，有人这样写 __weak __typeof__(self) wself = self;。我查了一下资料，总结一下。
typeof关键字是C语言中的一个新扩展,在linux内核中应用非常广泛。
说明 typeof()的参数可以是表达式或一种类型。返回的结果是一种类型。
表达式 typeof(x[0](1));
这里假设 x 是一个函数指针数组，这样就可以得到这个函数返回值的类型了。如果将 typeof 用于表达式，则该表达式不会执行。只会得到该表达式的类型。以下示例声明了 int 类型的 var 变量，因为表达式 foo() 是 int 类型的。由于表达式不会被执行，所以不会调用 foo 函数。
1 2 extern int foo(); typeof(foo()) var; 一种类型 typeof(int *) a,b; 等价于：int *a,*b;
例子 把 y 定义成 x 指向的数据类型：
typeof(*x) y;
把 y 定义成 x 指向数据类型的数组：
typeof(*x) y[4];
把 y 定义成一个字符指针数组：</description></item></channel></rss>