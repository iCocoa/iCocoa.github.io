<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tech on Haisheng Wu's Tech Blog</title><link>https://redscarf.me/categories/tech/</link><description>Recent content in Tech on Haisheng Wu's Tech Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 09 Jan 2024 20:10:22 +1000</lastBuildDate><atom:link href="https://redscarf.me/categories/tech/index.xml" rel="self" type="application/rss+xml"/><item><title>AI 笔记</title><link>https://redscarf.me/ai-note/</link><pubDate>Tue, 09 Jan 2024 20:10:22 +1000</pubDate><guid>https://redscarf.me/ai-note/</guid><description>如何找落地场景 从最熟悉的领域入手 让 AI 学习最厉害员工的能力，再让 ta 辅助其他员工，实现降本增效 找 【文本进，文本出】的场景 别求大而全。将任务拆解，先解决小任务、小场景（小切口、大纵深） 通俗原理 通过上文，猜测下一个词出现的概率。
大模型阅读了大量人类说过的所有话（训练），就是机器学习 把一串 token 后面跟着的不同 token 的概率存入神经网络，保存的数据就是参数，也叫权重 当我们给它若干 token，大模型就能算出概率最高的下一个 token 是什么。这就是生成，也叫推理 用生成的 token，再加上上文，就能继续生成下一个 token。以此类推，生成更多文字 如何用好 AI？ 数字神经网络和人脑的生物神经网络，在数学原理上是一样的。 ——OpenAI 首席科学家 Ilya Sutskever
所以，把 AI 当人看！！！和人怎么相处就和 AI 怎么相处。
使用 AI 的几种模式 Embedding AI（少） AI Copilot（协助） AI Agent（代理） 从上往下，AI 参与处理的任务越多。
AI 相关的编程基本是 Python 语言。 安装 OpenAI pip3 install --upgrade openai 大模型里面的角色 System Role：主要是定义系统的行为规范和全局设置。 Assistant Role：主要负责与用户的交互，根据用户的输入生成响应。 这两种角色在构建对话系统时是互补的，共同决定了系统的整体行为和用户体验。
LangChain 里面的 LLM 模块和 ChatModel LLM：通常用于生成单个文本输出，适合一次性提示和响应的场景。 ChatModel：专门用于处理对话，能够记住对话历史并生成连贯的回复，适合构建多轮对话系统。 框架对比 Llamaindex：主要用于构建和管理向量数据库，特别适合文档检索和知识库管理。 Semantic Kernel：专注于构建对话系统，支持多轮对话和上下文管理，适合构建复杂的对话应用。 LangChain：全面的框架，支持链式处理和多种模型，适合构建多样化的语言模型应用。 Replicate Replicate 是一个云端 AI 模型运行平台，它允许用户通过云端 API 直接运行机器学习模型，非专业人士也能上手。</description></item><item><title>数据库的动态列</title><link>https://redscarf.me/db-dynamic-column/</link><pubDate>Tue, 25 Jul 2023 20:17:32 +1000</pubDate><guid>https://redscarf.me/db-dynamic-column/</guid><description>动态列的几种设计思路 在需求开发过程中，我们有时会遇到一种场景：某个具体业务中的属性是动态的。在理想情况下，我们可以使用穷举法对所有可能的属性进行分析，然后进行分类，最终形成一套解决方案。然而，现实往往是骨感的，Leader和客户通常不会给我们这个时间。因此，我们需要探讨一些更为实际的解决方案。
一、使用数据库DDL进行动态创建 优点：
操作简单，只需通过SQL管理即可实现。 缺点：
不同情况下的动态字段增加会导致表结构膨胀。 在已有数据的表中修改字段容易导致锁表，影响性能。 二、使用数据库预留字段 优点：
与数据库无关，对业务侵入性小。 缺点：
扩展性差，超出预留字段范围后如何处理新字段？ 可读性差，预留字段通常为attr1、attr2等，影响字段的可读性。 性能较低，为兼容多种数据类型，预留字段通常采用较长的文本数据类型存储，影响数据库性能。 三、使用数据库中的JSON数据类型 优点：
使用简单，绝大多数编程语言都支持JSON操作，方便快捷。 对于MySQL或PostgreSQL等数据库，已原生支持JSON字段，可基于JSON进行扩展查询。 JSON采用key:value形式存储数据，可避免字段可读性差的问题，通过规范命名提高可读性。 扩展性高，增加或删除字段实现简单，直接移除key即可，不影响表性能。 缺点：
JSON字段查询操作与普通字段稍有差异，有一定复杂度。 JSON字段的索引性能有待提高。 四、使用NoSQL数据库 优点：
采用MongoDB等JSON数据库，可以快速扩展。 专业数据存储，查询等性能可针对优化，性能高。 缺点：
需要一定的学习成本。 综上所述，第一种和第二种方案若非必要，不建议采用。第三种方案在中小项目中能应对绝大多数需求。如果存储的数据较多且性能要求较高，可以考虑采用第四种方案或第三、四种方案相结合。
支持动态列的数据库 MariaDB 通过创建BLOB列（最大64k？），可以使用mariadb-dynamic-columns实现动态列。
示例： CREATE TABLE items ( id INT NOT NULL PRIMARY KEY AUTO_INCREMENT, name varchar(100) NOT NULL, attributes BLOB ); 插入数据时使用特定函数（COLUMN_CREATE）指定动态列的数据结构，key/value形式： INSERT INTO items (name, attributes) VALUES (&amp;#39;MariaDB t-shirt&amp;#39;, COLUMN_CREATE(&amp;#39;colour&amp;#39;,&amp;#39;blue&amp;#39;, &amp;#39;size&amp;#39;,&amp;#39;XXL&amp;#39;)), (&amp;#39;MariaDB t-shirt&amp;#39;, COLUMN_CREATE(&amp;#39;colour&amp;#39;,&amp;#39;blue&amp;#39;, &amp;#39;size&amp;#39;,&amp;#39;XL&amp;#39;)), (&amp;#39;Samsung Galaxy S5&amp;#39;, COLUMN_CREATE(&amp;#39;colour&amp;#39;,&amp;#39;white&amp;#39;, &amp;#39;OS&amp;#39;, &amp;#39;Android&amp;#39;, &amp;#39;type&amp;#39;, &amp;#39;phone&amp;#39;)), (&amp;#39;Samsung Galaxy Pro 3&amp;#39;, COLUMN_CREATE(&amp;#39;colour&amp;#39;,&amp;#39;white&amp;#39;, &amp;#39;size&amp;#39;,8, &amp;#39;OS&amp;#39;, &amp;#39;Android&amp;#39;, &amp;#39;resolution&amp;#39;,&amp;#39;1920x1200&amp;#39;, &amp;#39;type&amp;#39;,&amp;#39;tablet&amp;#39;)); 查询时使用COLUMN_JSON函数，返回JSON格式的数据： SELECT name AS Item, COLUMN_JSON(attributes) AS &amp;#39;Dynamic Columns&amp;#39; FROM items LIMIT 1; 使用COLUMN_LIST函数列举列中包含的属性，如colour、size： SELECT name AS Item, COLUMN_LIST(attributes) AS &amp;#39;Attribute Names&amp;#39; FROM items; 查询动态列中具体的某个属性，如colour： SELECT name AS Item, COLUMN_GET(attributes, &amp;#39;colour&amp;#39; AS CHAR) AS Colour FROM items; PostgreSQL 支持JSON数据类型，相比普通text文本字段类型，JSON数据类型强制要求列中每个存储的值都符合JSON格式规则。</description></item><item><title>多租户</title><link>https://redscarf.me/multi-tenant/</link><pubDate>Mon, 24 Jul 2023 19:30:32 +1000</pubDate><guid>https://redscarf.me/multi-tenant/</guid><description>多租户架构概述与实现 **多租户（Multi-tenancy）**是一种软件架构模式，允许多个客户（租户）共享同一个应用实例和底层资源，同时保障租户数据的隔离与安全。租户可以是企业、部门或个人用户。其目标是在优化资源利用效率的同时，满足租户对个性化、安全性和成本效益的需求。
多租户的背景与优势 背景 云计算的普及：随着云计算技术的发展，SaaS（软件即服务）模式迅速崛起，多租户架构成为共享资源和优化成本的关键技术。 资源利用效率需求：通过在同一物理或逻辑服务器上运行多个租户应用，提高资源利用率并降低运营成本。 个性化和隔离需求：满足租户定制化的同时，确保数据安全与隔离。 降低运维成本：多租户架构显著减少了软件升级与补丁管理的复杂性。 优势 低成本：通过共享资源，显著降低基础设施和维护费用。SaaS多租户软件通常以订阅形式提供，租户分担运营成本。 可伸缩性：租户可根据需求灵活扩展，只需调整订阅配置。 无代码定制化：无需复杂的开发，租户即可通过配置满足特定业务需求。 持续更新与维护：软件提供商统一管理更新与补丁，租户自动获得改进，无需额外操作。 提高生产率：租户可专注于核心业务，无需管理基础设施或软件。 多租户架构的实现方式 根据隔离程度和成本，不同场景下的多租户实现方式如下：
1. 共享数据库 + 共享架构 所有租户共享一个数据库实例与数据库架构，租户数据通过租户标识（如租户ID）区分。
优点： 成本低：资源利用率高，节约硬件与运维成本。 开发简单：实现复杂度较低。 适合中小规模租户：支持批量操作。 缺点： 安全性较低：需严格控制租户间的数据隔离。 扩展性有限：租户增长可能引发性能瓶颈。 适用场景：小型SaaS应用，租户间数据隔离需求较低。 2. 独立数据库 + 共享架构 每个租户拥有独立的数据库，但共享数据库架构。
优点： 数据隔离性好：提升安全性。 扩展性强：可独立扩展租户数据库。 缺点： 成本较高：需分配单独数据库实例。 运维复杂度提升：需管理多个数据库实例。 适用场景：中型SaaS应用，数据隔离需求高。 3. 独立数据库 + 独立架构 每个租户拥有独立的数据库与架构，支持更高的定制化。
优点： 高度隔离：数据、性能、定制化完全独立。 灵活性高：满足复杂业务需求。 缺点： 成本高：需为每个租户单独配置资源。 开发与运维复杂度高：架构需逐一维护。 适用场景：大型企业级应用，少量租户但数据敏感且需求复杂。 4. 容器化隔离 通过容器技术（如Docker），为每个租户提供独立的容器化服务。
优点： 部署灵活：每个容器的环境可独立配置。 高扩展性：便于弹性伸缩。 强隔离性：容器内外环境相互独立。 缺点： 运维复杂：需管理容器编排工具（如Kubernetes）。 成本：资源分配灵活性可能引发一定浪费。 适用场景：需要高度隔离和动态扩展的中大型应用。 特殊技术：命名空间与多租户 Linux命名空间 Linux命名空间是一种操作系统层面的资源隔离技术，可以将全局资源划分为命名空间范围内的资源。命名空间隔离涵盖主机名、用户权限、文件系统、网络、进程等，支撑了容器技术（如Docker）。
命名空间通过为每个租户创建独立的资源视图来实现隔离。与Cgroups（控制组）结合使用时，可以进一步限制每个租户对CPU、内存和I/O的使用，从而实现资源的公平分配。例如，网络命名空间可以为每个租户分配独立的虚拟网络接口和IP地址，进而避免资源争夺。
在多租户架构中，Linux命名空间的典型应用包括：
容器化多租户：通过Docker或Kubernetes提供租户级别的隔离，支持弹性扩展。 云原生平台：为每个租户动态分配资源并隔离彼此的工作负载，确保数据和网络安全。 服务级别隔离：通过用户命名空间隔离租户权限，避免越权访问。 这些特性使Linux命名空间成为多租户系统中资源隔离和管理的重要基石。</description></item><item><title>Prompt 框架模版</title><link>https://redscarf.me/ai-prompt-template/</link><pubDate>Sun, 09 Jul 2023 21:30:32 +1000</pubDate><guid>https://redscarf.me/ai-prompt-template/</guid><description>Crispe Matt Nigh 的 CRISPE Framework，比较适合用于编写 prompt 模板。CRISPE 分别代表以下含义：
CR: Capacity and Role（能力与角色）。你希望 ChatGPT 扮演怎样的角色。
I:Insight（洞察力），背景信息和上下文（坦率的说我觉得用Context 更好）。
S： Statement（指令），你希望 ChatGPT 做什么。
P：Personality（个性），你希望 ChatGPT 以什么风格或方式回答你。
E：Experiment（尝试），要求 ChatGPT 为你提供多个答案。
以下是这几个参数的例子：
Step Example Capacity and Role Act as an expert on software development on the topic of machine learning frameworks, and an expert blog writer. 把你想象成机器学习框架主题的软件开发专家，以及专业博客作者。 Insight The audience for this blog is technical professionals who are interested in learning about the latest advancements in machine learning.</description></item><item><title>Kafka 总结</title><link>https://redscarf.me/kafka-1/</link><pubDate>Thu, 27 Jan 2022 20:56:50 +1000</pubDate><guid>https://redscarf.me/kafka-1/</guid><description>consumer 是推还是拉？ https://kafka.apache.org/documentation/#design_pull kafka 生产者端生成消息推送（push）到 broker，消费者端从 broker 拉取（pull）消息。
统一采用 pull 的方式？ boker 从生产者 pull 消息。在生产者数量庞大的场景下，broker 需要管理维护很多的关系，简直是梦魇。所以采用的是生产者往 broker push 消息。
统一采用 push 的方式？ broker 往 consumer push 消息。在 consumer 多样化的场景下，如果生产者的生产速率远远大于消费者，broker 控制不好，push 会造成 consumer 不堪重负。反之，由 consumer 根据自身处理速率来决定何时从 broker 拉取消息，会更好。采用 pull 的弊端在于，如果 broker 没有消息，那么就会空转，这可以通过在调用 poll 接口时传入等待时间阻塞或者传入批次数据包大小来等待阻塞。
kafka 的 ack 机制 客户端连接到 leader broker 上，发送消息之后，等待或不等待 leader broker 的 ack（是否等待取决于参数request.required.acks 配置）。比如： 客户端设置 acks=0，客户端不作任何等待，即使消息没有写入 kafka 集群。 客户端设置 acks=1，客户端会等待 Leader 副本成功写入后返回的确认，但如果 Leader 副本在消息被同步到其他副本之前崩溃，消息可能会丢失。 客户端设置 acks=all 或 acks=-1参数，leader 在接收到客户端的消息之后，先写入日志文件，然后往同步副本（ISR）发送数据，等所有的 follower 都确认消息写入成功后，leader 再给客户端发送 ack 确认。</description></item><item><title>博客搬新家了！！！</title><link>https://redscarf.me/hugo_newbie/</link><pubDate>Sat, 03 Jul 2021 00:06:32 +1000</pubDate><guid>https://redscarf.me/hugo_newbie/</guid><description>将博客生成器从原来的 Hexo 换成了 Hugo。
特别感谢闫博推荐 Hugo 这个静态网站生成器并提供 技术支持！</description></item><item><title>Docker 使用</title><link>https://redscarf.me/docker-base-use/</link><pubDate>Tue, 07 Jul 2020 22:15:32 +1000</pubDate><guid>https://redscarf.me/docker-base-use/</guid><description>通过 Docker 命令行工具与 Docker Daemon 进程通讯使用。
使用步骤 安装 Docker 到宿主机（物理机） 到仓库拉取镜像
https://hub.docker.com 运行镜像产生容器（实例，一个镜像可以运行多个） 镜像操作 搜索镜像 docker search imageName 拉取镜像 docker pull imageName:tag tag 版本号，如不指定默认是 latest 查看本地镜像 docker images 删除镜像 docker rmi imageID docker rmi [repositoryname]:[tag] 删除所有未加标签的镜像(untagged) docker rmi $(docker images | grep &amp;#34;^&amp;lt;none&amp;gt;&amp;#34; | awk &amp;#34;{print $3}&amp;#34;) 重命名镜像 docker tag imageId imageName:tag 通过本地 Dockerfile 文件编译镜像文件 docker build -t mop:latest - &amp;lt; mopDockerfile 容器操作 进入容器 sudo docker exec -it ubuntu bash docker exec -it ardupilot bash 查看容器 docker ps -a -a：所有容器，包括停止的 -q：查看停止的容器，不加选项默认查看运行中的容器 保存容器 sudo docker save ubuntu &amp;gt; ubuntu_save.</description></item><item><title>Lombok</title><link>https://redscarf.me/lombok/</link><pubDate>Thu, 30 Apr 2020 19:10:32 +0100</pubDate><guid>https://redscarf.me/lombok/</guid><description>介绍 Lombok 是提升 Java 编码效率常用的工具，借助它开发人员可以使用注解来自动生成一些模版代码。比如 getter、setter、equals、toString 等方法。
安装 在 maven 中添加依赖 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.18.4&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; 在编辑器中添加插件 如：Intellij Idea，在 setting 的 plugin 里搜索lombok plugin，安装插件
使用 常用的几个注解
@Data ：注在类上，自动生成类的 get、set、equals、hashCode、canEqual、toString 方法
@AllArgsConstructor ：注在类上，自动生成类的全参构造方法
@NoArgsConstructor ：注在类上，自动生成类的无参构造
@Setter ：注在属性上，自动生成 set 方法
@Getter ：注在属性上，自动生成 get 方法
@EqualsAndHashCode ：注在类上，自动生成对应的 equals 和 hashCode 方法
@Log4j/@Slf4j ：注在类上，自动生成对应的 Logger 对象，变量名为 log
@Cleanup(&amp;ldquo;close&amp;rdquo;)：注在本地变量上，自动释放资源（如：关闭 InputStream）
@Synchronized：注在方法上，自动生成一个私有锁变量
@SneakyThrows：自动生成异常处理语句
注意继承关系中使用 Lombok @EqualsAndHashCode 与 @ToString 注解默认情况下忽略父类的成员变量。譬如打印时 toString 返回的结果中缺少父类的成员变量，解决办法是在注解中设置 callSuper 属性为 true， @ToString(callSuper = true) 、@EqualsAndHashCode(callsuper = true)。</description></item><item><title>Json Web Token</title><link>https://redscarf.me/jwt/</link><pubDate>Wed, 09 Oct 2019 22:15:32 +1000</pubDate><guid>https://redscarf.me/jwt/</guid><description/></item><item><title>WebViewJavascriptBridge 源码剖析</title><link>https://redscarf.me/ios-wvjb-sc-analyse/</link><pubDate>Thu, 20 Dec 2018 22:21:48 +1000</pubDate><guid>https://redscarf.me/ios-wvjb-sc-analyse/</guid><description>WebViewJavascriptBridge 是一个可以让 OC 与 JS 进行交互通信的第三方开源库。相比其他热门的第三方库，WebViewJavascriptBridge 代码量比较少，并且设计优雅巧妙，可以说是 “小而美”。
WebViewJavascriptBridge 库在 OC 端和 JS 端都有对等的逻辑实现，事先注册 handler，内部维护一个消息队列。透明的 iframe HTML 元素和 webview 的 stringByEvaluatingJavaScriptFromString 是通信的关键。OC 端发消息给 JS 端比较直观，调起 stringByEvaluatingJavaScriptFromString 执行脚本传入消息即可。JS 端发消息给 OC 端，需要事先把消息存到队列中，然后借助 iframe 发起一个伪请求，伪请求会被 webview 的代理方法拦截下来，OC 端因此得知 JS 端消息队列中有消息，最后调起 stringByEvaluatingJavaScriptFromString 方法解析 JS 方法拿到队列中的消息并处理。交互流程见下图：
整个库只有以下几个文件：
WebViewJavascriptBridge.h WebViewJavascriptBridge.m WKWebViewJavascriptBridge.h WKWebViewJavascriptBridge.m WebViewJavascriptBridgeBase.h WebViewJavascriptBridgeBase.m WebViewJavascriptBridge_JS.h WebViewJavascriptBridge_JS.m 一般使用只需要关注 WebViewJavascriptBridge 类提供的接口，这个类的主要职责是用来做 Mac 和 iOS webview 的适配（包括 WKWebView，但是这部分代理出去给 WKWebViewJavaScriptBridge 类）并为客户端提供便利的使用接口。WebViewJavascriptBridgeBase 类负责有关数据加工、消息队列管理、消息派发及回调的处理工作。WebViewJavascriptBridge_JS 类包含 JS 端的实现代码，通过宏处理返回 JS 端实现代码的一个 OC 字符串，便于在适当时机将其注入到文档模型中完成 bridge 的初始化。</description></item><item><title>iOS 远程打包脚本制作</title><link>https://redscarf.me/ios-remote-pack/</link><pubDate>Mon, 23 Jul 2018 20:00:50 +1000</pubDate><guid>https://redscarf.me/ios-remote-pack/</guid><description>在 iOS 开发中，一般打发布包都是在本地打包，也就是工程师在自己开发电脑上使用 Xcode 编译并导出安装包来进行发布，为了提高效率可能会制作一些自动化打包脚本。本文聊的是远程打包的内容，通过资源拷贝及参数替换然后编译完成打包。
由于 HTML5 跨平台的特点，很多技术团队考虑到代码复用，在部分模块中会采用 h5 来描述界面。甚至有些不需要太复杂交互的 app，全部界面采用 h5 来编写，也就是一个 web 工程。对于大部分现有的 web 工程，能打包成 app 就已经满足了业务诉求。DCloud 团队开发的 HBuilder（IDE）工具中提供了云打包的功能，用起来很方便，简单的说，就是把 web 工程上传到云打包服务器，最后打包生成 app，点击下载即可安装使用。
虽然云打包服务很方便，但上传源码总感觉不太妥当，总有些秘密不想让别人看见，并且其他同事也有打包的需求，但不一定会使用 HBuilder。因此，搭建一个自己的打包服务很有必要。
按照 HBuilder 提供的云打包功能，先定一个初步的需求：
支持修改应用 id、版本号 、icon、启动图 支持导入签名文件 开工！！！
准备工作 首先，需要一台安装了 MacOS 的电脑（当做服务器使用）。
笔者手头上刚好有台闲置的电脑就拿来当服务器使用了，装了 WMWare，然后装了 MacOS 虚拟机（问题较多，不建议使用虚拟机）。
物理机 windows7，内存 4G；虚拟机 MacOS，内存 3G。
其次，在服务器上部署一个 web 服务，提供打包交互界面方便客户端上传资源文件及下载安装包。我们的界面只提供了一个 www zip 包的上传入口，所有应用资源及打包相关的配置文件都在里面。www 目录结构如下：
appConfig.json 文件内容 { &amp;#34;id&amp;#34;:&amp;#34;com.domain.pack&amp;#34;, &amp;#34;appName&amp;#34;:&amp;#34;我的应用&amp;#34;, &amp;#34;debug&amp;#34;:true, &amp;#34;launchPath&amp;#34;: &amp;#34;index.html&amp;#34;, &amp;#34;version&amp;#34;: { &amp;#34;name&amp;#34;: &amp;#34;1.0.0&amp;#34;, &amp;#34;code&amp;#34;: &amp;#34;100&amp;#34; }, ... } launchPath 对应 web 应用入口文件，iOS 工程使用这个文件路径作为 webview 的加载入口。</description></item><item><title>Android Gradle 注入编译变量</title><link>https://redscarf.me/android-gradle-build/</link><pubDate>Sat, 09 Jun 2018 12:36:16 +1000</pubDate><guid>https://redscarf.me/android-gradle-build/</guid><description>最近为了制作 Android 应用打包脚本，学习了一下 gradle。Gradle 构建系统语法简洁、功能强大、配置灵活，笔者只是把它当作一个构建工具来使用，基于它所提供的便利制作可以修改版本号、编译号、id 及导入证书的脚本。
对于一个项目或者一个工程，Gradle 可以定义多个构建任务，debug 和 release 是常见的两个构建任务，用户还可以根据需要自定义自己的构建任务，如测试构建任务和预发布构建任务，甚至是针对不同发布渠道的构建任务。这里只用到 debug 任务。
gradle 命令行支持传入自定义参数，并在编译过程注入这些参数。
修改 appid 及 版本号 修改 build.gradle 文件 android { compileSdkVersion 21 buildToolsVersion &amp;#39;26.0.2&amp;#39; defaultConfig { applicationId project.hasProperty(&amp;#39;applicationId&amp;#39;) ? applicationId : &amp;#34;com.domain.myApp&amp;#34; minSdkVersion 14 targetSdkVersion 21 versionCode project.hasProperty(&amp;#39;versionCode&amp;#39;) ? versionCode.toInteger() : 100 versionName project.hasProperty(&amp;#39;versionName&amp;#39;) ? versionName : &amp;#34;1.0.0&amp;#34; testInstrumentationRunner &amp;#34;android.support.test.runner.AndroidJUnitRunner&amp;#34; } 命令行中传入对应 key 的参数 gradle assembleDebug -PversionCode=&amp;#34;200&amp;#34; -PversionName=&amp;#34;2.0.0&amp;#34; -PapplicationId=&amp;#34;com.domain.myApp.debug&amp;#34; 修改应用 id 的最好同时修改包名，不然会有包名冲突，修改包名需要修改 AndroidManifest.xml 文件，先在 build.gradle 文件中使用 manifestPlaceholders 属性定义一个键：</description></item><item><title>Core Bluetooth Programming Guide 译文</title><link>https://redscarf.me/ios-core-bluetooth-programming-guide/</link><pubDate>Mon, 26 Mar 2018 19:09:15 +1000</pubDate><guid>https://redscarf.me/ios-core-bluetooth-programming-guide/</guid><description>介绍 关于 Core Bluetooth Core Bluetooth 框架提供 iOS 应用和 Mac 应用与设备（配备了蓝牙低能耗无线技术的设备）通信的类。例如，应用可以发现、探测并与低能耗外围设备（比如心率监听器和数字恒温器）交互。从 macOS 10.9 和 iOS 6 开始，Mac 和 iOS 设备还可以当做蓝牙低能耗外设来使用，为其它设备提供数据，包括其他 Mac 和 iOS 设备。
一览 蓝牙低能耗无线技术基于蓝牙 4.0 规范，规范中除了别的之外，定义了与低能耗设备通信的一套协议。Core Bluetooth 框架是蓝牙低能耗协议栈的一个抽象，也就是说，它为开发者隐藏了许多规范中的底层细节，让开发者更加容易开发应用（与蓝牙低能耗设备交互的应用）。
中央和外围是 Core Bluetooth 的核心成员 在蓝牙低能耗通信中，有两个核心成员：中央（central）和外围（peripheral）。每个成员扮演不同的角色。外围通常拥有其他设备需要的数据，中央通常使用外围提供的信息来完成一些任务。例如，一个配备了蓝牙低能耗技术的数字恒温器可能为一个 iOS 应用提供房间的温度信息，然后该应用采用用户友好的方式来显示温度。
每个成员在扮演它的角色时都会执行一组不同的任务。外围通过在空中广播持有的数据来让自身的存在被感知，中央设备扫描附近的外围设备（可能包含中央设备感兴趣的数据）。当中央设备发现外围设备，中央设备就请求与外围设备连接并开始探测和交互外围设备的数据。外围设备负责以适当的方式来响应中央设备。
相关章节：Core Bluetooth Overview
Core Bluetooth 简化了一般的蓝牙任务 Core Bluetooth 框架抽离了蓝牙 4.0 规范中的底层细节。因此，应用中需要实现的一般蓝牙低能耗任务被简化了。如果开发实现中央角色的应用，Core Bluetooth 使得发现、连接外围设备和探测、交互外围数据变得简单。另外，Core Bluetooth 还让本地设备实现外围角色变得简单。
相关章节：Performing Commmon Central Role Tasks,Performing Common Peripheral Role Tasks
iOS 应用的状态影响蓝牙的表现 当应用处于后台或挂起状态时，蓝牙相关的特性会受到影响。在这两种状态下，默认是应用无法执行蓝牙低能耗任务。也就是说，如果应用需要在后台执行蓝牙低能耗任务，可以声明支持 Core Bluetooth 后台运行模式中的一个或两个（一个属于中央角色，另一个属于外围角色）。即使在你指定了一个后台运行模式或两个都指定，当应用处于后台时，某些蓝牙任务的执行依然会有所不同，设计应用时，需要考虑到这些差异。
即使应用支持后台处理，应用仍然可能在任意时刻被系统终止以清空内存给当前前台应用使用。在 iOS 7之后，Core Bluetooth 支持保存中央和外围管理者对象的状态信息并在应用启动的时候恢复该状态，可以使用这个特性来支持涉及蓝牙设备的长期活动（long-term actions）。</description></item><item><title>Difference between authentication, authorization,verification, validation</title><link>https://redscarf.me/terminology-confusion/</link><pubDate>Tue, 12 Dec 2017 21:41:34 +1000</pubDate><guid>https://redscarf.me/terminology-confusion/</guid><description>verification, validation, authentication, authorization 这几个术语很常用，也经常被误用，这里做一次对比总结。
identity
A security principal (you or a computer, typically) wants to access a system. Because the system doesn’t know you yet, you need to make a declaration of who you are. Your answer to the question “Who are you” is the first thing you present to a system when you want to use it. Some common examples of identity are user IDs, digital certificates (which include public keys), and ATM cards.</description></item><item><title>Local and Remote Notification Programming Guide 译文</title><link>https://redscarf.me/ios-local-and-remote-notification-programming-guide/</link><pubDate>Mon, 27 Nov 2017 20:26:21 +1000</pubDate><guid>https://redscarf.me/ios-local-and-remote-notification-programming-guide/</guid><description>原文地址：本地和远程通知编程指南
应用中的通知 本地和远程通知概览 重要 这篇文档包含开发中有关 API 或技术的初步信息，这些信息可能会改变，并且根据这篇文档来实现的软件应当在最终的操作系统软件中进行测试。
本地通知和远程通知是在应用有新数据可用时通知用户的两种方式，即使此时应用不在前台运行。例如，短信应用可能会让用户知道有新的短信来了，日历应用可能会通知用户即将到来的约会。本地通知和远程通知的区别很简单：
对于本地通知，应用在本地配置通知的细节并把这些细节传给系统，然后由系统来处理通知的传递（当应用不在前台时）。iOS、tvOS、watchOS 都支持本地通知。 对于远程通知，使用公司服务器中的一个通过苹果推送通知服务把数据推送到用户的设备。iOS、tvOS、watchOS、macOS 都支持远程通知。 本地通知和远程通知都需要添加代码来支持应用中的通知的调度和处理。对于远程通知，必须提供一个服务器环境，该环境能够接收来自用户设备的数据和发送通知相关的数据到 苹果推送消息服务 (简称 APNs，由苹果提供的用来处理远程通知传递的服务)。
User Notifications 和 User Notifications UI 框架 从 iOS 10、watchOS 3、tvOS 10 开始，User Notifications 框架提供一致的方式来和处理本地通知。除了管理本地通知，该框架也支持远程通知的处理，然而远程通知的配置仍然需要一些平台特有的 API。因为这是一个独立的框架，所以可以在应用中或者扩展中使用，比如 WatchKit 扩展。
注意 macOS 上远程通知的配置和处理需要使用平台特有的方法（在 AppKit 框架中找）
User Notifications 框架也支持创建 通知服务应用扩展 (notification service app extension)，它可以让你在远程通知传递之前修改通知的内容。如果在应用中包含通知服务应用扩展，系统会把收到的通知在传递给用户之前先传递给扩展。可以使用这类扩展来给应用的通知实现端到端的加密、在通知传递前修改其内容，又或者下载与通知相关的额外的图片或媒体文件。
User Notifications UI 框架是 User Notifications 的配套，它可以让你自定义系统的通知界面的外观。使用User Notifications UI 框架来定义 通知内容应用扩展(notification content app extension)，它的任务就是提供一个包含自定义内容的视图控制器来显示在通知界面中。系统会显示自定义视图控制器而不是默认的系统界面。可以使用这种扩展在通知界面中加入多媒体或动态内容。
更多有关 User Notifications 框架的类的信息，请看 User Notifications Framework Reference。关于创建通知内容应用扩展的类的信息，请看 User Notifications UI Framework Reference。</description></item><item><title>《第一行代码》</title><link>https://redscarf.me/android-first-line-code-note/</link><pubDate>Sat, 14 Oct 2017 11:59:26 +1000</pubDate><guid>https://redscarf.me/android-first-line-code-note/</guid><description>最近为了学习 Android，找从事 Android 开发的朋友推荐些书，最后他推荐了《第一行代码》（第 2 版）和《Android 开发艺术探索》两本书。本文是在阅读了《第一行代码》之后所做的笔记，主要记录 Android 平台上的一些比较有趣的特性以及它和 iOS 的不同之处。
Android 全貌 2008 年 9 月，Google 正式发布 Android 1.0 系统 2014 年 Google I/O 大会上发布号称史上版本改动最大的 Android 5.0 系统，这版本使用 ART 运行环境替换 Dalvik 虚拟机，同时推出 Wear、Auto、TV 系统 2016 年 Google I/O 大会推出 Android 7.0，加入多窗口模式 Android 系统架构 Android 系统架构分为四层：Linux 内核层、系统运行库层、应用架构层、应用层。
Linux 内核层：主要包含一些硬件的底层驱动。
系统运行库层：包含 C/C++ 的底层支持库，例如：支持 3D 绘图的 OpenGL|ES 库、浏览器内核 Webkit 库和 SQLite 数据库支持库。另外还包含 Android 运行时库。
应用架构层：包含构建应用程序用到的 API，开发人员主要使用这层提供的 API 来构建应用。
应用层：包含手机上安装的应用，联系人、短信等。
Android 系统为开发人员提供了：
四大组件，活动（Activity）、服务（Service）、广播接收器（Broadcast Receiver） 和内容提供器（Content Provider） 系统控件 SQLite 数据库 多媒体，音乐、视频、图片、拍照、闹铃等 地理位置定位 Android 开发环境及工具 环境：JDK + Android SDK</description></item><item><title>OC 与 JS 通信的几种方式</title><link>https://redscarf.me/ios-oc-interact-with-js/</link><pubDate>Fri, 23 Jun 2017 22:57:25 +1000</pubDate><guid>https://redscarf.me/ios-oc-interact-with-js/</guid><description>在代理方法中拦截协议 使用 JavaScriptCore WKWebView 的 WKScriptMessagehandler 使用 NSURLProtocol 拦截请求 使用第三方库 WebViewJavascriptBridge 使用 WebSocket 这里只介绍第 6 种，其它的相关资料网上有很多。
使用 WebSocket 的方式需要在应用内起一个 websocket server 服务（有很多第三方的 websocket server 库），html 页面通过 Websocket 连接到服务，接着就是发送消息了，剩下的就跟代理方法拦截协议类似。
// OC code, 以 PocketSocket 这个库为例 _socketServer = [PSWebSocketServer serverWithHost:nil port:9001]; _socketServer.delegate = self; _socketServer.delegateQueue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0); [_socketServer start]; #pragma mark - PSWebSocketServerDelegate - (void)serverDidStart:(PSWebSocketServer *)server { NSLog(@&amp;#34;Server did start…&amp;#34;); } - (void)serverDidStop:(PSWebSocketServer *)server { NSLog(@&amp;#34;Server did stop…&amp;#34;); } - (BOOL)server:(PSWebSocketServer *)server acceptWebSocketWithRequest:(NSURLRequest *)request { NSLog(@&amp;#34;Server should accept request: %@&amp;#34;, request); return YES; } - (void)server:(PSWebSocketServer *)server webSocket:(PSWebSocket *)webSocket didReceiveMessage:(id)message { // 在这里拦截 NSLog(@&amp;#34;Server websocket did receive message: %@&amp;#34;, message); NSString *text = message; NSURL *url = [NSURL URLWithString:text]; if ([url.</description></item><item><title>第一次成为技术主管易犯的3个常见错误</title><link>https://redscarf.me/three-common-mistakes-of-the-first-time-tech-lead/</link><pubDate>Fri, 16 Dec 2016 22:49:16 +1000</pubDate><guid>https://redscarf.me/three-common-mistakes-of-the-first-time-tech-lead/</guid><description>译自 Three Common Mistakes of the First Time Tech Lead
by Patrick Kua
Tech Principal and generalising Specialist
Don&amp;rsquo;t miss the author&amp;rsquo;s earlier post on the 5 Tips for Being an Effective Tech Lead.
别错过作者先前写的关于成为高效技术主管的5个秘诀。
The first time a developer steps into the role of a Tech Lead can be difficult. The skills and experience of a seasoned developer do not automatically translate into the skills necessary for the Tech Lead role.</description></item><item><title>HTTPS 单向/双向认证</title><link>https://redscarf.me/https-uni-bidirectional-authentication/</link><pubDate>Tue, 08 Nov 2016 20:09:40 +1000</pubDate><guid>https://redscarf.me/https-uni-bidirectional-authentication/</guid><description>HTTPS HyperText Transfer Protocol，超文本传输协议，是互联网上使用最广泛的一种协议。HTTP协议传输的数据都是未加密的，也就是明文的，不适合用来传输隐私信息。默认 80 端口。
Hyper Text Transfer Protocol over Secure Socket Layer，安全的超文本传输协议，网景公式设计了 SSL(Secure Sockets Layer) 协议用于对 Http 协议传输的数据进行加密，保证会话过程中的安全性。默认 443 端口。
SSL 包含对称加密和非对称加密，在建立传输链路时，SSL 首先使用非对称加密的方式对对称加密密钥进行加密，建立链路后，使用对称加密的方式对传输内容进行加密。非对称加密有更高的安全性，在这个基础上使用对称加密可以获得更快的速度，提高传输效率。
单向认证 客户端校验服务端证书
client hello 客户端发起一条到服务端的连接，包含客户端支持的 TLS 版本、支持的加密套件(即加密算法)以及客户端随机数。
server hello 服务端回应，包含服务端 SSL 证书、选择的加密套件以及服务端随机数。
authentication 客户端向颁发证书的 CA 验证服务端的 SSL 证书，以确认服务端是它声称的那个身份，从而保证客户端与域名真正的所有者通信。
send premaster key 客户端发送另一个随机数 “premaster key”，并对它使用服务端的公钥（从服务端 SSL 证书中获取得到）进行加密。
decrypt premaster key 服务端解密 premaster key
create session key 客户端和服务端各自使用客户端随机数、服务端随机数以及 premaster key 来计算 “session key”，即对称加密密钥，两边计算得出同样的结果并各自保留。
client send finished 客户端使用 session key 加密一条 finished 消息并发送给服务端。</description></item><item><title>iOS Hook WebView 的代理方法</title><link>https://redscarf.me/ios-hook-uiwebview-delegate-method/</link><pubDate>Tue, 18 Oct 2016 20:09:01 +1000</pubDate><guid>https://redscarf.me/ios-hook-uiwebview-delegate-method/</guid><description>国内 DCloud 团队推出的 HTML5+ 技术框架可以用来开发 Hybrid 应用。经过调研，我们决定试一试 。框架的核心原理是使用 iOS 系统原生 UIWebView 和 WKWebView 来加载资源并渲染界面，Native 的能力（如拍照、蓝牙）通过自定义插件来提供。
我们的应用有个需求，就是在 webview 加载完页面或者加载页面之前加入一些东西。比如：加载完页面后，根据 HTML 的 title 标签来设置导航栏标题。
原生想要插手页面加载周期，只能靠代理方法。但是因为没法修改源码，所以只能找其它办法。主要思路是：使用 Method Swizzle 找出代理对象然后再换掉代理方法实现。
以 UIWebView 为例，具体操作如下：
第一步，通过交换 setDelegate 的实现，找到目标代理对象所属的类；
UIWebView+Intercepter.m - (void)p_setDelegate:(id&amp;lt;UIWebViewDelegate&amp;gt;)delegate { [self p_setDelegate:delegate]; Class delegateClass = [self.delegate class]; // 进一步交换 delegateClass 的代理方法 [UIWebViewDelegateHook exchangeUIWebViewDelegateMethod:delegateClass]; } #pragma mark - Method Swizzling + (void)load { static dispatch_once_t onceToken; dispatch_once(&amp;amp;onceToken, ^{ Class class = [super class]; // When swizzling a class method, use the following: // Class class = object_getClass((id)self); SEL originalSelector = @selector(setDelegate:); SEL swizzledSelector = @selector(p_setDelegate:); Method originalMethod = class_getInstanceMethod(class, originalSelector); Method swizzledMethod = class_getInstanceMethod(class, swizzledSelector); BOOL didAddMethod = class_addMethod(class, originalSelector, method_getImplementation(swizzledMethod), method_getTypeEncoding(swizzledMethod)); if (didAddMethod) { class_replaceMethod(class, swizzledSelector, method_getImplementation(originalMethod), method_getTypeEncoding(originalMethod)); } else { method_exchangeImplementations(originalMethod, swizzledMethod); } }); } 第二步，把目标代理对象所属类的代理方法实现换成我们自己写的方法实现。</description></item><item><title>iOS 10 需要在 info.plist 中添加权限设置</title><link>https://redscarf.me/ios-ios10-user-privacy/</link><pubDate>Fri, 07 Oct 2016 22:35:29 +1000</pubDate><guid>https://redscarf.me/ios-ios10-user-privacy/</guid><description>iOS 10 开始对隐私权限更加严格, 如需使用隐私权限需要在工程的 info.plist 文件中声明,如果不声明程序在调用隐私权限（如相机）时应用程序会崩溃。
key 可以从下拉列表选择，value 为弹框提示文字（类型 String）
权限名称 Key 值 通讯录 NSContactsUsageDescription 麦克风 NSMicrophoneUsageDescription 相册 NSPhotoLibraryUsageDescription 相机 NSCameraUsageDescription 持续获取地理位置 NSLocationAlwaysUsageDescription 使用时获取地理位置 NSLocationWhenInUseUsageDescription 蓝牙 NSBluetoothPeripheralUsageDescription 语音转文字 NSSpeechRecognitionUsageDescription 日历 NSCalendarsUsageDescription</description></item><item><title>Grand Central Dispatch</title><link>https://redscarf.me/ios-gcd/</link><pubDate>Mon, 05 Jan 2015 20:13:18 +1000</pubDate><guid>https://redscarf.me/ios-gcd/</guid><description>GCD（Grand Central Dispatch）是异步执行任务的技术之一。
一般将应用程序中记述的线程管理用的代码在系统级中实现。开发者只需要定义想执行的任务并追加到适当的 Dispatch Queue 中，GCD 就能生成必要的线程并计划执行任务。由于线程管理是作为系统的一部分来实现的，因此可统一管理，也可执行任务，这样就比以前的线程更有效率。
dispatch_queue_t queue = dispatch_queue_create(&amp;#34;myQueue&amp;#34;, DISPATCH_QUEUE_CONCURRENT); dispatch_async(queue, ^{ /** * 长时间处理 * 例如：AR用图像识别、数据库访问 */ /** * 长时间处理结束，主线程使用该处理结果 */ dispatch_async(dispatch_get_main_queue(), ^{ /** * 只在主线程可以执行的处理 * 例如用户界面刷新 */ }); }); 在导入 GCD 之前，Cocoa 框架提供了 NSObject 类的performSelectorInBackground:withObject实例方法和performSelectorOnMainThread实例方法等简单的多线程编程技术。
线程
线程是程序中一个单一的顺序控制流程。进程内一个相对独立的、可调度的执行单元，是系统独立调度和分派 CPU 的基本单位。在单个程序中同时运行多个线程完成不同的工作，称为多线程。 “一个 CPU 执行的 CPU 命令列为一条无分叉路径”即为“线程”。 现在一个物理的 CPU 芯片实际上有64个（64核）CPU，尽管如此，“一个 CPU 执行的 CPU 命令列为一条无分叉路径”仍然不变。 OS X 和 iOS 的核心 XNU 内核在发生操作系统事件时（如每隔一定时间，唤起系统调用等情况）会切换执行路径。执行中路径的状态，例如CPU的寄存器等信息保存到各自路径专用的内存块中，从切换目标路径专用的内存块中，复原 CPU 寄存器等信息，继续执行切换路径的 CPU 命令列。这称为“上下文切换”。 由于使用多线程的程序可以在某个线程和其他线程之间反复多次进行上下文切换，因此看上去好像1个 CPU 核能够并列地执行多个线程一样。而且在具有多个 CPU 核的情况下，就不是“看上去像”了，而是真的提供了多个CPU核并行执行多个线程的技术。 使用多线程容易引发的常见问题</description></item><item><title>Auto Layout 知识点梳理</title><link>https://redscarf.me/ios-autolayout/</link><pubDate>Wed, 15 Oct 2014 22:29:37 +1000</pubDate><guid>https://redscarf.me/ios-autolayout/</guid><description>视图需要有确定的位置与大小才能正确显示在屏幕上。Auto Layout 使用对齐矩阵来确定视图的位置与大小，也就是所谓的约束。我们创建的每一条规则都规定了界面的一部分与另一部分的关系，某一部分可以由另一部分计算得出结果。
y = ax + b; 是一种线性关系。
创建约束的常见的方式：
Xib NSLayoutConstraint VFS 第一种，可以在(Interface Builder)IB中布局约束，并且根据需求自定义它们。
第二种，可以使用代码创建单个约束。NSLayoutConstraint 类提供constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:contant:方法，可以让你每次创建一个约束，它将某项的属性关联到另一项。
第三种，使用可视化格式语言来表示各项是如何沿着垂直和水平坐标轴布局的。
所有约束都是 NSLayoutConstraint 类的成员，无论你是以何种方式创建它们的。每个约束都在一个 Objective—C 对象中存储y = ax + b规则，并且通过 Auto Layout 引擎来表达该规则。可视化约束 是另一种实现相同效果的工具。</description></item><item><title>ARC</title><link>https://redscarf.me/ios-arc/</link><pubDate>Mon, 22 Sep 2014 21:22:25 +1000</pubDate><guid>https://redscarf.me/ios-arc/</guid><description>什么是自动引用计数 自动引用计数（ARC，Automatic Reference Counting）是指内存管理中对引用采取自动计数的技术。要使用 ARC，需要满足以下条件：
使用 Xcode4.2 或以上版本 使用 LLVM 编译器 3.0 或以上版本 编译器选项中设置 ARC 有效 生活例子：办公室开关灯
最早进入办公室的人开灯。 count = 1 之后进入办公室的人，需要照明。 count = 2 下班离开办公室的人，不需要照明。 count = 1 最后离开办公室的人关灯。（此时已无人需要照明） count = 0 内存管理 思考方式：
自己生成的对象，自己持有 非自己生成的对象，自己也能持有 不再需要自己持有的对象时释放 非自己持有的对象无法释放 表 1- 2 对象操作与 Objective-C 方法的对应
对象操作 Objective-C方法 生成并持有对象 alloc/new/copy/mutableCopy方法 持有对象 retain方法 释放对象 release方法 废弃对象 dealloc方法 区域(zone)
NSDefaultMallocZone、NSZoneMalloc 等名称中包含的NSZone是什么呢？它是为防止内存碎片化而引入的结构。对内存分配的区域本身进行多重化管理，根据使用对象的目的、对象的大小分配内存，从而提高了内存管理的效率。但是，如同苹果官方文档 Programming With ARC Release Notes 中所说，现在的运行时系统只是简单地忽略了区域的概念。运行时系统中的内存管理本身已极具效率，使用区域来管理内存反而会引起内存使用效率低下以及源代码复杂化问题。
修饰符
__strong 修饰符 __weak 修饰符 __unsafe_unretained 修饰符 __autoreleasing 修饰符 __unsafe_unretained 修饰符正如其名 unsafe 所示，是不安全的所有权修饰符。尽管 ARC 式的内存管理是编译器的工作，但附有 __unsafe_unretained 修饰符的变量不属于编译器的内存管理对象。同附有 __weak 修饰符的变量一样，因为自己生成并持有的对象不能继续为自己所有，所以生成的对象会立即被释放。</description></item><item><title>iOS Block</title><link>https://redscarf.me/ios-blocks/</link><pubDate>Sat, 20 Sep 2014 20:18:23 +1000</pubDate><guid>https://redscarf.me/ios-blocks/</guid><description>blocks 是 C 语言的扩充功能。blocks 是带有自动变量（局部变量）的匿名函数。
截获自动变量 int main() { int dmy = 256; int val = 10; const char *fmt = &amp;#34;val = %d\n&amp;#34;; void (^blk)(void) = ^{ printf(fmt,val); }; val = 2; fmt = &amp;#34;These value were changed. val = %d\n&amp;#34;; blk(); return 0; } 结果：val = 10
分析：block 语法的表达式使用的是它之前声明的自动变量 fmt 和 val。block 表达式截获所使用的自动变量的值为瞬间值。因为 block 表达式保存了自动变量的值（截获），所以在执行 block 语法后，即使改写了 block 中使用的自动变量的值也不会影响 block 执行的结果。
需要在 block 中修改一个变量的值，需要使用 __block 说明符。
block 的实质 block 实际上是作为极普通的 C 语言源代码来处理的。通过支持 block 的编译器，含有 block 语法的源代码转换为一般 C 语言编译器能够处理的源代码，并作为极为普通的 C 语言代码被编译。</description></item><item><title>Typeof()</title><link>https://redscarf.me/c-typeof/</link><pubDate>Sun, 27 Jul 2014 20:56:50 +1000</pubDate><guid>https://redscarf.me/c-typeof/</guid><description>看到项目中，有人这样写 __weak __typeof__(self) wself = self;。我查了一下资料，总结一下。
typeof关键字是C语言中的一个新扩展,在linux内核中应用非常广泛。
说明 typeof()的参数可以是表达式或一种类型。返回的结果是一种类型。
表达式 typeof(x[0](1));
这里假设 x 是一个函数指针数组，这样就可以得到这个函数返回值的类型了。如果将 typeof 用于表达式，则该表达式不会执行。只会得到该表达式的类型。以下示例声明了 int 类型的 var 变量，因为表达式 foo() 是 int 类型的。由于表达式不会被执行，所以不会调用 foo 函数。
extern int foo(); typeof(foo()) var; 一种类型 typeof(int *) a,b; 等价于：int *a,*b;
例子 把 y 定义成 x 指向的数据类型：
typeof(*x) y;
把 y 定义成 x 指向数据类型的数组：
typeof(*x) y[4];
把 y 定义成一个字符指针数组：
typeof(typeof(char *)[4]) y;
这与下面的定义等价： char *y[4];
typeof(int *) p1,p2; 等价于
int *p1, *p2;
typeof(int) *p3,p4;等价于</description></item><item><title>iOS 应用的 main.m 文件</title><link>https://redscarf.me/ios-main/</link><pubDate>Sun, 13 Jul 2014 21:15:12 +1000</pubDate><guid>https://redscarf.me/ios-main/</guid><description>在项目导航面板中选中 main.m ，可以看到
int main(int argc, char * argv[]) { @autoreleasepool { return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class])); } } 这是 iOS 应用的入口函数。UIApplicationMain 函数会创建一个 UIApplication 对象。每个 iOS 应用都有且只有一个 UIApplication 对象（单例），该对象的作用时维护运行循环。一旦程序创建了某个 UIApplication 对象，该对象的运行循环就会一直循环下去，main() 的执行也会因此阻塞。
此外，UIApplicationMain 函数还会创建某个指定类(此处为 AppDelegate)的对象，并将其设置为 UIApplication 对象的 delegate。UIApplicationMain 函数的第三个实参为 NSString 类型，指定了该对象所属的类。UIApplication 的 delegate 都需要遵守 UIApplicationDelegate 协议。
@interface AppDelegate : UIResponder &amp;lt;UIApplicationDelegate&amp;gt;
在应用启动运行循环时，UIApplication 对象会在应用出现相应状态变化时，向其 delegate 发送特定的消息。如：
- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions; - (void)applicationWillResignActive:(UIApplication *)application; - (void)applicationDidEnterBackground:(UIApplication *)application; - (void)applicationWillEnterForeground:(UIApplication *)application; - (void)applicationDidBecomeActive:(UIApplication *)application; - (void)applicationWillTerminate:(UIApplication *)application; UIApplication 负责建立应用程序的事件循环（Event Loop），事件循环中可以不断接收交互操作，比如屏幕触摸手势、各类传感器（重力加速器、陀螺仪等）等。</description></item></channel></rss>